package com.soma.debugger.views {	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	/**	 * <b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br />	 * <b>Company:</b> Less Rain - <a href="http://www.lessrain.com/" target="_blank">www.lessrain.com</a><br />	 * <b>Class version:</b> 1.0<br />	 * <b>Actionscript version:</b> 3.0<br />	 * <b>Copyright:</b> 	 * <br />	 * <b>Date:</b> Nov 23, 2009<br />	 * <b>Usage:</b>	 * @example	 * <listing version="3.0"></listing>	 */		public class SomaDebuggerWindow extends Sprite {		//------------------------------------		// private, protected properties		//------------------------------------				protected var _background:Sprite;		protected var _title:String;		protected var _debuggerTitleBarName:TextField;		protected var _textfield:TextField;		protected var _close:Sprite;				protected var _isDragging:Boolean;		protected var _hasBeenDragged:Boolean;				protected var _widthWindow:Number;		protected var _heightWindow:Number;				protected var _scrollbar:SomaDebuggerScrollbar;				//------------------------------------		// public properties		//------------------------------------						//------------------------------------		// constructor		//------------------------------------				public function SomaDebuggerWindow(title:String = "", widthWindow:Number = 100, heightWindow:Number = 100) {			_title = title;			_widthWindow = widthWindow;			_heightWindow = heightWindow;			initialize();			addEventListener(Event.ADDED_TO_STAGE, added);		}		//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				protected function initialize():void {			scrollRect = new Rectangle(0, 0, _widthWindow, _heightWindow);			_isDragging = false;			_hasBeenDragged = false;			setLayout();			createTitle();			createButtons();			createTextField();			createScrollbar();		}				private function added(e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, added);
			stage.addEventListener(Event.RESIZE, updateLayout);			updateLayout();		}				private function setLayout():void {			_background = addChild(new Sprite) as Sprite;			_background.graphics.beginFill(0xCCCCCC);			_background.graphics.drawRect(0, 0, _widthWindow, _heightWindow);			_background.addEventListener(MouseEvent.MOUSE_DOWN, mouseHandler);			_background.addEventListener(MouseEvent.MOUSE_UP, mouseHandler);		}				private function createTitle():void {
			// title			var tfTitle:TextFormat = new TextFormat("_typewriter", 12);			tfTitle.letterSpacing = -0.5;			_debuggerTitleBarName = new TextField();			_debuggerTitleBarName.selectable = false;			_debuggerTitleBarName.defaultTextFormat = tfTitle;			_debuggerTitleBarName.autoSize = TextFieldAutoSize.LEFT;			_debuggerTitleBarName.text = _title;			_debuggerTitleBarName.x = 1;			_debuggerTitleBarName.y = -3;			addChild(_debuggerTitleBarName);
		}		private function createButtons():void {			// close			_close = addChild(new Sprite) as Sprite;			_close.buttonMode = true;			_close.mouseChildren = false;			_close.addEventListener(MouseEvent.CLICK, closeHandler);			var tf:TextFormat = new TextFormat("_typewriter", 12);			var closeLabel:TextField = new TextField();			closeLabel.defaultTextFormat = tf;			closeLabel.autoSize = TextFieldAutoSize.LEFT;			closeLabel.text = "X";			_close.addChild(closeLabel);			_close.x = _widthWindow - _close.width - 1;			_close.y = -3;		}		private function createTextField():void {			var tf:TextFormat = new TextFormat("_typewriter", 11);			tf.letterSpacing = -0.5;			_textfield = new TextField();			_textfield.defaultTextFormat = tf;			_textfield.multiline = true;			_textfield.wordWrap = true;			_textfield.x = 3;			_textfield.y = 15;			_textfield.background = true;			_textfield.width = _widthWindow - 11;			_textfield.height = _heightWindow - 18;			addChild(_textfield);		}				private function createScrollbar():void {			_scrollbar = addChild(new SomaDebuggerScrollbar(_textfield)) as SomaDebuggerScrollbar;		}				private function mouseHandler(e:MouseEvent):void {			switch (e.type) {				case MouseEvent.MOUSE_MOVE:					stage.removeEventListener(Event.RESIZE, updateLayout);					_isDragging = true;					_hasBeenDragged = true;					break;				case MouseEvent.MOUSE_DOWN:					addEventListener(MouseEvent.MOUSE_MOVE, mouseHandler);					if (parent != null) {						parent.setChildIndex(this, parent.numChildren-1);					}					_isDragging = false;					startDrag();					break;				case MouseEvent.MOUSE_UP:					removeEventListener(MouseEvent.MOUSE_MOVE, mouseHandler);					if (_isDragging) {						_isDragging = false;					}					else {						if (!_scrollbar.isDragging) {							var heightTarget:Number = (scrollRect.height == _heightWindow) ? 15 : _heightWindow;							scrollRect = new Rectangle(0, 0, _widthWindow, heightTarget);							if (!_hasBeenDragged) updateLayout();						}					}					stopDrag();					break;			}		}				protected function updateLayout(e:Event = null):void {					}				private function closeHandler(event:MouseEvent):void {			dispatchEvent(new Event(Event.CLOSE));		}				public function get textfield() : TextField {			return _textfield;		}				// PUBLIC		//________________________________________________________________________________________________				public function dispose():void {			// dispose objects, graphics and events listeners
			try {				stage.removeEventListener(Event.RESIZE, updateLayout);				_background.removeEventListener(MouseEvent.MOUSE_DOWN, mouseHandler);				_background.removeEventListener(MouseEvent.MOUSE_UP, mouseHandler);				_close.removeEventListener(MouseEvent.CLICK, closeHandler);				_scrollbar.dispose();				while (numChildren > 0) removeChildAt(0);
				_debuggerTitleBarName = null;				_background = null;				_close = null;				_textfield = null;				_scrollbar = null;			} catch(e:Error) {
				trace("Error in", this, "(dispose method):", e.message);
			}
		}				public function get close() : Sprite {			return _close;		}	}}