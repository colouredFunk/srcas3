<languageVersion: 1.0;>
kernel maoboli
<
    namespace : "zero.shaders";
    vendor : "zero";
    version : 2;
    description : "maoboli";
>
{
    //不支持循环 - -
    //parameter int blurX
    //<
    //    minValue: 0;
    //    maxValue: 100;
    //    defaultValue: 5;
    //>;
    //parameter int blurY
    //<
    //    minValue: 0;
    //    maxValue: 100;
    //    defaultValue: 5;
    //>;
    
    //parameter float modValue
    //<
    //    minValue:0.0;
    //    maxValue:100.0;
    //    defaultValue:5.0;
    //>;
    //parameter float modResult
    //<
    //    minValue:0.0;
    //    maxValue:100.0;
    //    defaultValue:5.0;
    //>;
    
    parameter float A1
    <
        maxValue : 0.0;
        minValue : 10.0;
        defaultValue : 0.7;
    >;
    parameter float A2
    <
        maxValue : 0.0;
        minValue : 10.0;
        defaultValue : 0.3;
    >;
    parameter float A3
    <
        maxValue : 0.0;
        minValue : 10.0;
        defaultValue : 0.2;
    >;
    parameter float turbulence
    <
        maxValue : 500.0;
        minValue : 0.0;
        defaultValue : 150.0;
    >;
    
    input image4 bg;
    input image4 src;
    output float4 dst;
    
    void evaluatePixel()
    {
        /*
        float4 colorAccumulator = float4(0.0, 0.0, 0.0, 0.0);
       
        colorAccumulator += sampleNearest(bg, outCoord() + float2(-3,-3));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(-3,-2));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(-3,-1));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(-3,0));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(-3,1));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(-3,2));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(-3,3));
       
        colorAccumulator += sampleNearest(bg, outCoord() + float2(-2,-3));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(-2,-2));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(-2,-1));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(-2,0));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(-2,1));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(-2,2));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(-2,3));
       
        colorAccumulator += sampleNearest(bg, outCoord() + float2(-1,-3));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(-1,-2));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(-1,-1));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(-1,0));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(-1,1));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(-1,2));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(-1,3));
        
        colorAccumulator += sampleNearest(bg, outCoord() + float2(0,-3));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(0,-2));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(0,-1));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(0,0));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(0,1));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(0,2));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(0,3));
       
        colorAccumulator += sampleNearest(bg, outCoord() + float2(1,-3));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(1,-2));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(1,-1));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(1,0));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(1,1));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(1,2));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(1,3));
       
        colorAccumulator += sampleNearest(bg, outCoord() + float2(2,-3));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(2,-2));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(2,-1));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(2,0));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(2,1));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(2,2));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(2,3));
       
        colorAccumulator += sampleNearest(bg, outCoord() + float2(3,-3));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(3,-2));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(3,-1));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(3,0));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(3,1));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(3,2));
        colorAccumulator += sampleNearest(bg, outCoord() + float2(3,3));
        
        dst = colorAccumulator / 49.0;
        dst[3]=sampleNearest(src,outCoord()).a;
        */
        
        float2 oc=outCoord();
        //if(mod(oc.x+oc.y,modValue)<modResult){
        //    dst=sampleNearest(bg, outCoord());
        //}else{
        //    dst=sampleNearest(src, outCoord());
        //}
        
        pixel4 a = sampleNearest(bg, outCoord());
        pixel4 b = sampleNearest(src, outCoord());
        float alpha = a.a; //存储原始的alpha值
        if( (b.a > 0.0) && (a.a > 0.0)){
            float seed = oc.x + (((b.r + b.g + b.b)/3.0) * turbulence);
            float grain = (A1 * sin(seed) + A2 * sin(2.0 * seed + 0.3) + A3 * sin(3.0 * seed + 0.2));
            dst = sampleNearest(bg, oc) * (grain + 0.5);
            dst.a = alpha; //恢复原图的alpha值
        } else {
            //只是复制噪声图像区域外的背景像素
            dst = sampleNearest(bg, outCoord());
        }
    }
}